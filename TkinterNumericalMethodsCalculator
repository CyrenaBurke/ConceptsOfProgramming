from tkinter import *  
from Interpolation import Interpolation
from SolveEquations import SolveEquations

root = Tk()

root.title("Numerical Methods Calculator")

welcomeMessage = Label(root, text="Welcome! Are you ready to solve some numerical methods? Please choose from the drop down menu above.")
welcomeMessage.grid(row=0, column=0, pady=20, columnspan=3)

def linear(*args):
    #Global variables
    global equation1x, equation1y, equation1z, equation1w
    global equation2x, equation2y, equation2z, equation2w
    global equation3x, equation3y, equation3z, equation3w
    global equation4x, equation4y, equation4z, equation4w
    global userInt1, userInt2, userInt3, userInt4
    global equation4x, equation4y, equation4z

    #Creating new window for linear
    top = Toplevel()
    top.title('Solve Linear Equation')

    #Instructions label with instructions for user created and put onto window
    instructions = Label(top, text="Welcome! Here I can solve for any 4 equations of your choice! Just list the coefficients of each equation below, and I can solve for each unknown variable.")
    instructions.grid(row=0,column=0, columnspan=9)

    #Labels and user entry boxes created for coefficients for equation 1 and put onto window
    #Variables for equation 1: equation1x, equation1y, equatuion1z, equation1w, userInt1
    equation1x = Entry(top)
    equation1x.grid(row=1, column=0)
    xLabel1 = Label(top, text="x")
    xLabel1.grid(row=1, column=1)
    equation1y = Entry(top)
    equation1y.grid(row=1, column=2)
    yLabel1 = Label(top, text="y")
    yLabel1.grid(row=1, column=3)
    equation1z = Entry(top)
    equation1z.grid(row=1, column=4)
    zLabel1 = Label(top, text="z")
    zLabel1.grid(row=1, column=5)
    equation1w = Entry(top)
    equation1w.grid(row=1, column=6)
    wLabel1 = Label(top, text="w")
    wLabel1.grid(row=1, column=7)
    equalLabel = Label(top, text="=")
    equalLabel.grid(row=1, column=8)
    userInt1 = Entry(top)
    userInt1.grid(row=1, column=9)

    #Labels and user entry boxes created for coefficients for equation 2 and put onto window
    #Variables for equation 2: equation2x, equation2y, equatuion2z, equation2w, userInt2
    equation2x = Entry(top)
    equation2x.grid(row=2, column=0)
    xLabel2 = Label(top, text="x")
    xLabel2.grid(row=2, column=1)
    equation2y = Entry(top)
    equation2y.grid(row=2, column=2)
    yLabel2 = Label(top, text="y")
    yLabel2.grid(row=2, column=3)
    equation2z = Entry(top)
    equation2z.grid(row=2, column=4)
    zLabel2 = Label(top, text="z")
    zLabel2.grid(row=2, column=5)
    equation2w = Entry(top)
    equation2w.grid(row=2, column=6)
    wLabel2 = Label(top, text="w")
    wLabel2.grid(row=2, column=7)
    equalLabel2 = Label(top, text="=")
    equalLabel2.grid(row=2, column=8)
    userInt2 = Entry(top)
    userInt2.grid(row=2, column=9)

    #Labels and user entry boxes created for coefficients for equation 3 and put onto window
    #Variables for equation 3: equation3x, equation3y, equatuion3z, equation3w, userInt3
    equation3x = Entry(top)
    equation3x.grid(row=3, column=0)
    xLabel3 = Label(top, text="x")
    xLabel3.grid(row=3, column=1)
    equation3y = Entry(top)
    equation3y.grid(row=3, column=2)
    yLabel3 = Label(top, text="y")
    yLabel3.grid(row=3, column=3)
    equation3z = Entry(top)
    equation3z.grid(row=3, column=4)
    zLabel3 = Label(top, text="z")
    zLabel3.grid(row=3, column=5)
    equation3w = Entry(top)
    equation3w.grid(row=3, column=6)
    wLabel3 = Label(top, text="w")
    wLabel3.grid(row=3, column=7)
    equalLabel3 = Label(top, text="=")
    equalLabel3.grid(row=3, column=8)
    userInt3 = Entry(top)
    userInt3.grid(row=3, column=9)

    #Labels and user entry boxes created for coefficients for equation 4 and put onto window
    #Variables for equation 4: equation4x, equation4y, equatuion4z, equation4w, userInt4
    equation4x = Entry(top)
    equation4x.grid(row=4, column=0)
    xLabel4 = Label(top, text="x")
    xLabel4.grid(row=4, column=1)
    equation4y = Entry(top)
    equation4y.grid(row=4, column=2)
    yLabel4 = Label(top, text="y")
    yLabel4.grid(row=4, column=3)
    equation4z = Entry(top)
    equation4z.grid(row=4, column=4)
    zLabel4 = Label(top, text="z")
    zLabel4.grid(row=4, column=5)
    equation4w = Entry(top)
    equation4w.grid(row=4, column=6)
    wLabel1 = Label(top, text="w")
    wLabel1.grid(row=4, column=7)
    equalLabel4 = Label(top, text="=")
    equalLabel4.grid(row=4, column=8)
    userInt4 = Entry(top)
    userInt4.grid(row=4, column=9)

    #solveButton created and put onto window
    #When clicked goes to solveButton2() function
    solveButton = Button(top, text="Solve", command=solveButton2)
    solveButton.grid(row=6, column=0, pady=5, columnspan=9)

    #clearButton created and put onto window
    #When clicked goes to buttonClear2() function
    clearButton = Button(top, text="Clear", command=buttonClear2)
    clearButton.grid(row=7, column=0, pady=5, columnspan=9)

    #End of linear window
    top.mainloop()

#solveButton2() parameters passed in: equation1x, equation1y, equation1z, equation1w
#                                     equation2x, equation2y, equation2z, equation2w
#                                     equation3x, equation3y, equation3z, equation3w
#                                     equation4x, equation4y, equation4z, equation4w
#                                     userInt1, userInt2, userInt3, userInt4
def solveButton2(*args):
    #Global variables
    global equation1x, equation1y, equation1z, equation1w
    global equation2x, equation2y, equation2z, equation2w
    global equation3x, equation3y, equation3z, equation3w
    global equation4x, equation4y, equation4z, equation4w
    global userInt1, userInt2, userInt3, userInt4
    global fullMatrix
    global solutions

    #Converting following string type variables to float type: equation1x, equation1y, equation1z, equation1w
    #                                                          equation2x, equation2y, equation2z, equation2w
    #                                                          equation3x, equation3y, equation3z, equation3w
    #                                                          equation4x, equation4y, equation4z, equation4w
    #                                                          userInt1, userInt2, userInt3, userInt4 
    stringInput1 = equation1x.get()
    intAnswer1 = float(stringInput1)
    stringInput2 = equation1y.get()
    intAnswer2 = float(stringInput2)
    stringInput3 = equation1z.get()
    intAnswer3 = float(stringInput3)
    stringInput4 = equation1w.get()
    intAnswer4 = float(stringInput4)
    stringInput5 = equation2x.get()
    intAnswer5 = float(stringInput4)
    stringInput6 = equation2y.get()
    intAnswer6 = float(stringInput5)
    stringInput7 = equation2z.get()
    intAnswer7 = float(stringInput6)
    stringInput8 = equation2w.get()
    intAnswer8 = float(stringInput1)
    stringInput9 = equation3x.get()
    intAnswer9 = float(stringInput7)
    stringInput10 = equation3y.get()
    intAnswer10 = float(stringInput8)
    stringInput11 = equation3z.get()
    intAnswer11 = float(stringInput9)
    stringInput12 = equation3w.get()
    intAnswer12 = float(stringInput1)
    stringInput13 = equation4x.get()
    intAnswer13 = float(stringInput10)
    stringInput14 = equation4y.get()
    intAnswer14 = float(stringInput11)
    stringInput15 = equation4z.get()
    intAnswer15 = float(stringInput12)
    stringInput16 = equation4w.get()
    intAnswer16 = float(stringInput1)
    stringInput17 = userInt1.get()
    intAnswer17 = float(stringInput13)
    stringInput18 = userInt2.get()
    intAnswer18 = float(stringInput14)
    stringInput19 = userInt3.get()
    intAnswer19 = float(stringInput15)
    stringInput20 = userInt4.get()
    intAnswer20 = float(stringInput16)

    #Placing converted variables in 2-D array
    fullMatrix = [[intAnswer1, intAnswer2, intAnswer3, intAnswer4, intAnswer17], [intAnswer5, intAnswer6, intAnswer7, intAnswer8, intAnswer18], [intAnswer9, intAnswer10, intAnswer11, intAnswer12, intAnswer19], [intAnswer13, intAnswer14, intAnswer15, intAnswer16, intAnswer20]]

    #fullMatrix array  and '4' sent as a parameter to class SolveEquations and result stored in s
    #execute() in SolveEquations class called and result saved to array solutions   
    s = SolveEquations(fullMatrix, 4)
    solutions = s.execute()

    #linearAnswer() opens a new window, takes an array type in as a parameter and prints to window
    def linearAnswer(*args):
        answer=Toplevel()
        answerLabel = Label(answer, text=solutions)
        answerLabel.grid(row=0, column=0)
        answer.mainloop()

    #Call linearAnswer with solutions as a parameter
    linearAnswer(solutions)
    
#buttonClear2() called from clearButton in linear() 
#Clears boxes: equation1x, equation1y, equation1z, equation1w, userInt1
#              equation2x, equation2y, equation2z, equation2w, userInt2
#              equation3x, equation3y, equation3z, equation3w, userInt3
#              equation4x, equation4y, equation4z, equation4w, userInt4     
def buttonClear2():
    equation1x.delete(0, END)
    equation1y.delete(0, END)
    equation1z.delete(0, END)
    equation1w.delete(0, END)
    equation2x.delete(0, END)
    equation2y.delete(0, END)
    equation2z.delete(0, END)
    equation2w.delete(0, END)
    equation3x.delete(0, END)
    equation3y.delete(0, END)
    equation3z.delete(0, END)
    equation3w.delete(0, END)
    equation4x.delete(0, END)
    equation4y.delete(0, END)
    equation4z.delete(0, END)
    equation4w.delete(0, END)
    userInt1.delete(0, END)
    userInt2.delete(0, END)
    userInt3.delete(0, END)
    userInt4.delete(0, END)


def interpolation():
        #Global variables
        global x1, x2, x3, x4
        global y1, y2, y3

        #Create new window for interpolation
        second = Toplevel()
        second.title('Solve Interpolation')

        #Create label instructions and puts onto window
        instructions = Label(second, text="Please fill in six (x,y) values, and give the x-value you wish to find the corresponding y-value for. Then click the solve button.")
        instructions.grid(row=0,column=0, pady=20, columnspan=3)

        #Label that prints "x" to screen
        xLabel = Label(second, text="x")
        xLabel.grid(row=1, column=0, columnspan=3)

        #Entry boxes for x-values created(x1, x2, x3) and put onto window
        x1 = Entry(second)
        x1.grid(row=2, column=0, columnspan=3, pady=1)
        x2 = Entry(second)
        x2.grid(row=3, column=0, columnspan=3, pady=1)
        x3 = Entry(second)
        x3.grid(row=4, column=0, columnspan=3, pady=1)

        #Label that prints "y" to screen
        yLabel = Label(second, text="y")
        yLabel.grid(row=1, column=1, columnspan=3)

        #Entry boxes for y-values created(y1, y2, y3) and put onto screen
        y1 = Entry(second)
        y1.grid(row=2, column=1, columnspan=3, pady=1)
        y2 = Entry(second)
        y2.grid(row=3, column=1, columnspan=3, pady=1)
        y3 = Entry(second)
        y3.grid(row=4, column=1, columnspan=3, pady=1)

        #Label and entry box created for x-value(x4) to solve for corresponding y-value
        ysolve = Label(second, text="Please enter the x value that you want the corresponding y value for.")
        ysolve.grid(row=5,column=0, pady=20, columnspan=3)
        x4 = Entry(second)
        x4.grid(row=6, column=0, columnspan=3, pady=1)

        #myButton created and put onto screen that goes to solveButton() when clicked
        myButton = Button(second, text="Solve", command=solveButton, fg="black")
        myButton.grid(row=7, column=0, pady=5, columnspan=3)

        #clearButton created and put onto screen that goes to buttonClear() when clicked
        clearButton = Button(second, text="Clear", fg="black", command=buttonClear)
        clearButton.grid(row=9, column=0, pady=5, columnspan=3)

        #End of interpolation window
        second.mainloop()

#buttonClear() called in interpolation() when clearButton is clicked
#Clears entry boxes: x1, x2, x3, x4, y1, y2, y3 
def buttonClear():
        x1.delete(0, END)
        x2.delete(0, END)
        x3.delete(0, END)
        y1.delete(0, END)
        y2.delete(0, END)
        y3.delete(0, END)
        x4.delete(0, END)

#solveButton() called when solveButton() in interpolation() is clicked 
def solveButton(*args):
    global n
    global xs
    global ys
    global cs
    global result

    #Converts string type inputs from entry boxes(x1, x2, x3, x4, y1, y2, y3) in interpolation() to integer types
    stringInput = x1.get()
    intAnswer = int(stringInput)
    stringInput2 = x2.get()
    intAnswer2 = int(stringInput2)
    stringInput3 = x3.get()
    intAnswer3 = int(stringInput3)
    stringInput4 = x4.get()
    intAnswer4 = int(stringInput4)
    stringInput5 = y1.get()
    intAnswer5 = int(stringInput5)
    stringInput6 = y2.get()
    intAnswer6 = int(stringInput6)
    stringInput7 = y3.get()
    intAnswer7 = int(stringInput7)

    n = 2 
    xs = []
    ys = []
    cs = []

    #Converted int type values from entry boxes(x1, x2, x3, x4, y1, y2, y3) are placed into arrays(xs, ys)
    xs.append(intAnswer)
    xs.append(intAnswer2) 
    xs.append(intAnswer3)         
    ys.append(intAnswer5)
    ys.append(intAnswer6) 
    ys.append(intAnswer7)  

    #Call Interpolation() class and send (xs, ys, cs, n, intAnswer4) as parameters
    i = Interpolation(xs, ys, cs, n, intAnswer4)
    result = i.execute()
    
    #interpAnswer() takes an int type as a parameter
    #Creates a new window and prints result to the window
    def interpAnswer(*args):
        answerWindow = Toplevel()
        answerLabel = Label(answerWindow, text=result)
        answerLabel.grid(row=0, column=0)
        answerWindow.mainloop()

    interpAnswer(result)

#Starting drop down menu with numerical methods choices
menu = Menu(root)
root.config(menu=menu)

equationMenu = Menu(menu)
menu.add_cascade(label="Choose Numerical Method", menu=equationMenu)
equationMenu.add_command(label="Solve Linear Equations", command=linear)
equationMenu.add_command(label="Solve Interpolation", command=interpolation)

root.mainloop()

#    file: SolveEquations.cpp
#    class: SolveEquations
#    Purpose:
#        This class can solve any system of equations given their coefficients and the number of equations there are. This class
#        serves as one of the functions on the Numerical Methods calculator
#
class SolveEquations:
    #constructor: given all the coefficients, and the # of equations
    def __init__(self, fullMatrix, numOfEq):
        self.fullMatrix = fullMatrix
        self.numOfEq = numOfEq
        self.numOfVar = numOfEq  # # of variables to solve == # of equations there are
        self.coeffMatrix = [[0 for cols in range(self.numOfEq)] for rows in range(self.numOfVar)]
        self.b = [0 for i in range(self.numOfEq)]
        self.L = [0 for i in range(self.numOfEq)]
        self.S = [0 for i in range(self.numOfEq)]
        self.solutions = [0 for i in range(self.numOfEq)]
        for num in range(len(self.L)):
            self.L[num] = num + 1
        self.initialS()

    #Solves the system of equations!, executes the steps in correct order:
    def execute(self):
        #NOTE: k = iteration #
        #1.) Forward Elimination: Loop does n-1 iterations, n = # of equations
        for k in range(1, self.numOfEq):
            # 1.) Do the scaled ratios, and find which index of L lies the pivot eq.
            pivotEqIndex = self.doRatios(k)

            # 2.) Update L to switch the pivot eq. to correct spot (correct spot = index k-1)
            valueToSwitch = self.L[k - 1]
            self.L[k - 1] = self.L[pivotEqIndex]
            self.L[pivotEqIndex] = valueToSwitch

            # 3.) Do an iteration and print matrix after
            self.iteration(k)

        #2.) Back substitution:
        # 1.) Copy b and coeffMatrix from fullMatrix for back sub use
        for i in range(len(self.b)):
            self.b[i] = self.fullMatrix[i][self.numOfVar]
        for row in range(self.numOfEq):
            for col in range(self.numOfVar):
                self.coeffMatrix[row][col] = self.fullMatrix[row][col]

        #3.) Get solutions
        self.backSub()
        return self.solutions



    # initializes S[], finds the max element (in abs. value) in each row of matrix
    def initialS(self):
        for row in range(self.numOfEq):
            max = 0
            for col in range(self.numOfVar):      # purposely doesn't include the b values
                elem = abs(self.fullMatrix[row][col])

                if elem > max:
                    max = elem
            self.S[row] = max


    # calculates, compares, and prints ratios of a given iteration. Uses global L[], S[], and fullMatrix[]. Returns the index of #             L[] whose equation has the scaled highest ratio.
    def doRatios(self, k):
        ratios = [0 for i in range(len(self.L))]
        currRatio = None
        # 1.) Only finds ratios for the kth equation and on in L[]  (bc equations before that should have already been iterated)
        for index in range(k - 1, len(self.L)):
            eqIndex = self.L[index] - 1
            row = eqIndex
            coeff = self.fullMatrix[row][k - 1]

            currRatio = abs(coeff / self.S[eqIndex])
            ratios[index] = currRatio

        #2.) Find max ratio and save the index of where to find it, identical logic to initalS()
        maxRatio = 0
        indexOfMax = -1
        for index in range(len(ratios)):
            currRatio = ratios[index]
            if currRatio > maxRatio:
                maxRatio = currRatio
                indexOfMax = index

        return indexOfMax


    # Does one iteration given an iter #, uses global L[], fullMatrix[][], numOfVar. Compares coeffs of the pivot equation
    # with the following equations (listed in L[]), find the factor to zero out the correct coeff, factorizes it, then adds.
    # Saves the new coeffs into fullMatrix
    def iteration(self, k):
        # 1.) Obtain pivot row, and pivot's first coeff ( == coeff to compare to all others)
        pivotRow = self.L[k - 1] - 1  # L[k-1] = pivot equation --> l[k-1] - 1 == index of eq we want
        colToZero = k - 1
        pivotCoeff = self.fullMatrix[pivotRow][colToZero]

        # 2.) Loop starts with equation AFTER the pivot eq --> index = k
        for index in range(k, len(self.L)):
            otherEqRow = self.L[index] - 1
            otherCoeff = self.fullMatrix[otherEqRow][colToZero]
            factor = -1 * (otherCoeff / pivotCoeff)

            # 3.) Multiple each term in pivot row/eq , add to corresponding term, then store new coeff
            for col in range(k - 1, self.numOfVar + 1):
                otherTerm = self.fullMatrix[otherEqRow][col]
                pivotTerm = factor * (self.fullMatrix[pivotRow][col])
                newOtherTerm = pivotTerm + otherTerm

                self.fullMatrix[otherEqRow][col] = newOtherTerm


    # uses global L[], coeffMatrix[][], b[], and numOfEq. Method solves for unknown variables backwards given order from L[], store/initalizes global solutions[] in to array and returns it
    def backSub(self):

        # 1.) solutions[] to fill and return it, solvedFor[] to know whether or not has been solved already
        solvedFor = [False for i in range(self.numOfEq)]

        # Loop backwards from last equation stated in L[], in each eq loop from last coeff to first
        # Idea: If solved the variable where coeff is at --> substitute it and move to right side of eq
        #         Otherwise --> variable can be solved for --> divides coeff over to the right to solve variable
        for index in range(len(self.L) - 1, -1, -1):
            eqNumIndex = self.L[index] - 1

            for col in range(self.numOfEq - 1, -1, -1):
                solvedAlready = solvedFor[col]
                coeff = self.coeffMatrix[eqNumIndex][col]

                # if haven't solved it, solve it!
                if not (solvedAlready):
                    self.b[eqNumIndex] = self.b[eqNumIndex] / coeff
                    self.solutions[col] = self.b[eqNumIndex]
                    solvedFor[col] = True
                    break
                # Otherwise: needs to substitute the known variable and move to right side
                else:
                    solvedVar = self.solutions[col]
                    substitute = solvedVar * coeff

                # if Term is positive, need to add its negative, vice versa
                    self.b[eqNumIndex] = (self.b[eqNumIndex] + -1 * substitute)
                    
 #This class allows the user to enter three ordered pairs
#and interpolates between the points using Newton's method.
class Interpolation:
    def __init__(self, xs, ys, cs, n, z):
        self.xs = xs
        self.ys = ys
        self.cs = cs
        self.n = n
        self.z = z

    #Calculates the values of the coefficent vector
    def coeff(self):
        for i in range(0, (self.n)+1):
            self.cs.append(self.ys[i])
        for j in range(1, (self.n)+1):
            for k in range(self.n, j-1, -1):
                self.cs[k] = (self.cs[k] - self.cs[k - 1]) / (self.xs[k] - self.xs[k - j])

    #Interpolates between the points and returns the solution
    def evalnewton(self):
        result = self.cs[self.n]
        for i in range((self.n)-1, -1, -1):
            result = result * (self.z - self.xs[i]) + self.cs[i]
        return result

    #executes instance of class
    def execute(self):
        self.coeff()
        return self.evalnewton()
